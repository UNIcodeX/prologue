PathHandler	src/prologue/core/context.html#PathHandler	context: PathHandler	
Path	src/prologue/core/context.html#Path	context: Path	
Router	src/prologue/core/context.html#Router	context: Router	
RePath	src/prologue/core/context.html#RePath	context: RePath	
ReRouter	src/prologue/core/context.html#ReRouter	context: ReRouter	
ReversedRouter	src/prologue/core/context.html#ReversedRouter	context: ReversedRouter	
GlobalScope	src/prologue/core/context.html#GlobalScope	context: GlobalScope	
Context	src/prologue/core/context.html#Context	context: Context	
AsyncEvent	src/prologue/core/context.html#AsyncEvent	context: AsyncEvent	
SyncEvent	src/prologue/core/context.html#SyncEvent	context: SyncEvent	
Event	src/prologue/core/context.html#Event	context: Event	
HandlerAsync	src/prologue/core/context.html#HandlerAsync	context: HandlerAsync	
ErrorHandler	src/prologue/core/context.html#ErrorHandler	context: ErrorHandler	
ErrorHandlerTable	src/prologue/core/context.html#ErrorHandlerTable	context: ErrorHandlerTable	
UploadFile	src/prologue/core/context.html#UploadFile	context: UploadFile	
gScope	src/prologue/core/context.html#gScope,Context	context: gScope(ctx: Context): lent GlobalScope	
size	src/prologue/core/context.html#size,Context	context: size(ctx: Context): int	
incSize	src/prologue/core/context.html#incSize,Context,int	context: incSize(ctx: Context; num = 1)	
first	src/prologue/core/context.html#first,Context	context: first(ctx: Context): bool	
first=	src/prologue/core/context.html#first=,Context,bool	context: first=(ctx: Context; first: bool)	
initUploadFile	src/prologue/core/context.html#initUploadFile,string,string	context: initUploadFile(filename, body: string): UploadFile	
getUploadFile	src/prologue/core/context.html#getUploadFile,Context,string	context: getUploadFile(ctx: Context; name: string): UploadFile	
save	src/prologue/core/context.html#save,UploadFile,string,string	context: save(uploadFile: UploadFile; dir: string; filename = &quot;&quot;)	
newErrorHandlerTable	src/prologue/core/context.html#newErrorHandlerTable	context: newErrorHandlerTable(initialSize = defaultInitialSize): ErrorHandlerTable	
newErrorHandlerTable	src/prologue/core/context.html#newErrorHandlerTable,openArray[]	context: newErrorHandlerTable(pairs: openArray[(HttpCode, ErrorHandler)]): ErrorHandlerTable	
newReversedRouter	src/prologue/core/context.html#newReversedRouter	context: newReversedRouter(): ReversedRouter	
initEvent	src/prologue/core/context.html#initEvent,AsyncEvent	context: initEvent(handler: AsyncEvent): Event	
initEvent	src/prologue/core/context.html#initEvent,SyncEvent	context: initEvent(handler: SyncEvent): Event	
newContext	src/prologue/core/context.html#newContext,Request,Response,GlobalScope	context: newContext(request: Request; response: Response; gScope: GlobalScope): Context	
getSettings	src/prologue/core/context.html#getSettings,Context,string	context: getSettings(ctx: Context; key: string): JsonNode	
handle	src/prologue/core/context.html#handle,Context	context: handle(ctx: Context): Future[void]	
send	src/prologue/core/context.html#send,Context,string	context: send(ctx: Context; content: string): Future[void]	
respond	src/prologue/core/context.html#respond,Context,HttpCode,string,HttpHeaders	context: respond(ctx: Context; code: HttpCode; body: string;\n        headers: HttpHeaders = newHttpHeaders()): Future[void]	
hasHeader	src/prologue/core/context.html#hasHeader,Request,string	context: hasHeader(request: var Request; key: string): bool	
setHeader	src/prologue/core/context.html#setHeader,Request,string,string	context: setHeader(request: var Request; key, value: string)	
setHeader	src/prologue/core/context.html#setHeader,Request,string,seq[string]	context: setHeader(request: var Request; key: string; value: seq[string])	
addHeader	src/prologue/core/context.html#addHeader,Request,string,string	context: addHeader(request: var Request; key, value: string)	
getCookie	src/prologue/core/context.html#getCookie,Context,string,string	context: getCookie(ctx: Context; key: string; default: string = &quot;&quot;): string	
setCookie	src/prologue/core/context.html#setCookie,Context,string,string,string,Option[int],string,string	context: setCookie(ctx: Context; key, value: string; expires = &quot;&quot;;\n          maxAge: Option[int] = none(int); domain = &quot;&quot;; path = &quot;&quot;; secure = false;\n          httpOnly = false; sameSite = Lax)	
setCookie	src/prologue/core/context.html#setCookie,Context,string,string,,Option[int],string,string	context: setCookie(ctx: Context; key, value: string; expires: DateTime | Time;\n          maxAge: Option[int] = none(int); domain = &quot;&quot;; path = &quot;&quot;; secure = false;\n          httpOnly = false; sameSite = Lax)	
deleteCookie	src/prologue/core/context.html#deleteCookie,Context,string,string,string	context: deleteCookie(ctx: Context; key: string; path = &quot;&quot;; domain = &quot;&quot;)	
defaultHandler	src/prologue/core/context.html#defaultHandler,Context	context: defaultHandler(ctx: Context): owned(Future[void])	
default404Handler	src/prologue/core/context.html#default404Handler,Context	context: default404Handler(ctx: Context): owned(Future[void])	
default500Handler	src/prologue/core/context.html#default500Handler,Context	context: default500Handler(ctx: Context): owned(Future[void])	
getPostParams	src/prologue/core/context.html#getPostParams,Context,string,string	context: getPostParams(ctx: Context; key: string; default = &quot;&quot;): string	
getQueryParams	src/prologue/core/context.html#getQueryParams,Context,string,string	context: getQueryParams(ctx: Context; key: string; default = &quot;&quot;): string	
getPathParams	src/prologue/core/context.html#getPathParams,Context,string	context: getPathParams(ctx: Context; key: string): string	
getPathParams	src/prologue/core/context.html#getPathParams,Context,string,T	context: getPathParams[T: BaseType](ctx: Context; key: string; default: T): T	
setResponse	src/prologue/core/context.html#setResponse,Context,HttpCode,string	context: setResponse(ctx: Context; code: HttpCode; httpHeaders = [\n    (&quot;Content-Type&quot;, &quot;text/html; charset=UTF-8&quot;)].newHttpHeaders; body = &quot;&quot;;\n            version = HttpVer11)	
setResponse	src/prologue/core/context.html#setResponse,Context,Response	context: setResponse(ctx: Context; response: Response)	
multiMatch	src/prologue/core/context.html#multiMatch,string,StringTableRef	context: multiMatch(s: string; replacements: StringTableRef): string	
multiMatch	src/prologue/core/context.html#multiMatch,string,varargs[]	context: multiMatch(s: string; replacements: varargs[(string, string)]): string	
urlFor	src/prologue/core/context.html#urlFor,Context,string,openArray[],openArray[]	context: urlFor(ctx: Context; handler: string;\n       parameters: openArray[(string, string)] = @[];\n       queryParams: openArray[(string, string)] = @[]; usePlus = true; omitEq = true): string	
abortExit	src/prologue/core/context.html#abortExit,Context,string	context: abortExit(ctx: Context; code = Http401; body = &quot;&quot;; headers = newHttpHeaders();\n          version = HttpVer11)	
attachment	src/prologue/core/context.html#attachment,Context,string,string	context: attachment(ctx: Context; downloadName = &quot;&quot;; charset = &quot;utf-8&quot;)	
staticFileResponse	src/prologue/core/context.html#staticFileResponse,Context,string,string,string,string,string	context: staticFileResponse(ctx: Context; filename, dir: string; mimetype = &quot;&quot;;\n                   downloadName = &quot;&quot;; charset = &quot;utf-8&quot;; headers = newHttpHeaders()): owned(\n    Future[void])	
