registerErrorHandler	prologue/core/application.html#registerErrorHandler,Prologue,HttpCode,ErrorHandler	application: registerErrorHandler(app: Prologue; code: HttpCode; handler: ErrorHandler)	
registerErrorHandler	prologue/core/application.html#registerErrorHandler,Prologue,set[HttpCode],ErrorHandler	application: registerErrorHandler(app: Prologue; code: set[HttpCode]; handler: ErrorHandler)	
registerErrorHandler	prologue/core/application.html#registerErrorHandler,Prologue,openArray[HttpCode],ErrorHandler	application: registerErrorHandler(app: Prologue; code: openArray[HttpCode]; handler: ErrorHandler)	
newSettings	prologue/core/application.html#newSettings,Settings,LocalSettings	application: newSettings(settings: Settings; localSettings: LocalSettings): Settings	
addRoute	prologue/core/application.html#addRoute,Prologue,Regex,HandlerAsync,seq[HandlerAsync],LocalSettings	application: addRoute(app: Prologue; route: Regex; handler: HandlerAsync; httpMethod = HttpGet;\n         middlewares: seq[HandlerAsync] = @[]; settings: LocalSettings = nil)	
addRoute	prologue/core/application.html#addRoute,Prologue,Regex,HandlerAsync,seq[HttpMethod],seq[HandlerAsync],LocalSettings	application: addRoute(app: Prologue; route: Regex; handler: HandlerAsync;\n         httpMethod: seq[HttpMethod]; middlewares: seq[HandlerAsync] = @[];\n         settings: LocalSettings = nil)	
addRoute	prologue/core/application.html#addRoute,Prologue,string,HandlerAsync,string,seq[HandlerAsync],LocalSettings	application: addRoute(app: Prologue; route: string; handler: HandlerAsync; httpMethod = HttpGet;\n         name = &quot;&quot;; middlewares: seq[HandlerAsync] = @[]; settings: LocalSettings = nil)	
addRoute	prologue/core/application.html#addRoute,Prologue,string,HandlerAsync,seq[HttpMethod],string,seq[HandlerAsync],LocalSettings	application: addRoute(app: Prologue; route: string; handler: HandlerAsync;\n         httpMethod: seq[HttpMethod]; name = &quot;&quot;;\n         middlewares: seq[HandlerAsync] = @[]; settings: LocalSettings = nil)	
addRoute	prologue/core/application.html#addRoute,Prologue,seq[UrlPattern],string,LocalSettings	application: addRoute(app: Prologue; patterns: seq[UrlPattern]; baseRoute = &quot;&quot;;\n         settings: LocalSettings = nil)	
head	prologue/core/application.html#head,Prologue,string,HandlerAsync,string,LocalSettings	application: head(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n     middlewares: sink seq[HandlerAsync] = @[]; settings: LocalSettings = nil)	
get	prologue/core/application.html#get,Prologue,string,HandlerAsync,string,LocalSettings	application: get(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n    middlewares: sink seq[HandlerAsync] = @[]; settings: LocalSettings = nil)	
post	prologue/core/application.html#post,Prologue,string,HandlerAsync,string,LocalSettings	application: post(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n     middlewares: sink seq[HandlerAsync] = @[]; settings: LocalSettings = nil)	
put	prologue/core/application.html#put,Prologue,string,HandlerAsync,string,LocalSettings	application: put(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n    middlewares: sink seq[HandlerAsync] = @[]; settings: LocalSettings = nil)	
delete	prologue/core/application.html#delete,Prologue,string,HandlerAsync,string,LocalSettings	application: delete(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n       middlewares: sink seq[HandlerAsync] = @[]; settings: LocalSettings = nil)	
trace	prologue/core/application.html#trace,Prologue,string,HandlerAsync,string,LocalSettings	application: trace(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n      middlewares: sink seq[HandlerAsync] = @[]; settings: LocalSettings = nil)	
options	prologue/core/application.html#options,Prologue,string,HandlerAsync,string,LocalSettings	application: options(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n        middlewares: sink seq[HandlerAsync] = @[]; settings: LocalSettings = nil)	
connect	prologue/core/application.html#connect,Prologue,string,HandlerAsync,string,LocalSettings	application: connect(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n        middlewares: sink seq[HandlerAsync] = @[]; settings: LocalSettings = nil)	
patch	prologue/core/application.html#patch,Prologue,string,HandlerAsync,string,LocalSettings	application: patch(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n      middlewares: sink seq[HandlerAsync] = @[]; settings: LocalSettings = nil)	
all	prologue/core/application.html#all,Prologue,string,HandlerAsync,string,LocalSettings	application: all(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n    middlewares: sink seq[HandlerAsync] = @[]; settings: LocalSettings = nil)	
printRoute	prologue/core/application.html#printRoute,Prologue	application: printRoute(app: Prologue)	
appAddress	prologue/core/application.html#appAddress,Prologue	application: appAddress(app: Prologue): string	
appDebug	prologue/core/application.html#appDebug,Prologue	application: appDebug(app: Prologue): bool	
appName	prologue/core/application.html#appName,Prologue	application: appName(app: Prologue): string	
appPort	prologue/core/application.html#appPort,Prologue	application: appPort(app: Prologue): Port	
newApp	prologue/core/application.html#newApp,Settings	application: newApp(settings: Settings; middlewares: sink seq[HandlerAsync] = @[];\n       startup: sink seq[Event] = @[]; shutdown: sink seq[Event] = @[];\n       errorHandlerTable = DefaultErrorHandler;\n       appData = newStringTable(mode = modeCaseSensitive)): Prologue	
run	prologue/core/application.html#run,Prologue	application: run(app: Prologue)	
